parent class => base class/super class
child class =>  derived class/subclass

The keyword 'extends' is used for inheritance.

class Crickteter
{
	String name;
	String country;
	int totMatches;
}

class Batsman extends Cricketer		//Now Batsman is the child class of Cricketer
{
	int totRuns;
}


class Batsman extends Cricketer

It says:
-- class Batsman is the child class of Cricketer
-- It will have all the properties (name,country,totMatches) from its parent class i.e. Crickter and will have some of its own property(totRuns).

Whenever we create any object of Batsman class it will occupy space to store (name, country, totMatches, totRuns)

new Batsman();

int marks[];
int [] marks;
==============================================================================

class Crickteter
{
	String name;
	String country;
	int totMatches;
	
	void setDetails(String name, String country, int totMatches)
	{
		this.name = name;
		this.country = country;
		this.totMatches = totMatches;
	}
	
	void printDetails()
	{
		System.out.println(name);
		System.out.println(country);
		System.out.println(totMatches);
	}
}

class Batsman extends Cricketer		//Now Batsman is the child class of Cricketer
{
	int totRuns;
}

class Bowler extends Cricketer		//Now Bowler is the child class of Cricketer
{
	int totWickets;
}

class CricketerDemo
{
	public static void main(String args[])
	{
		Cricketer c1 = new Cricketer();
		c1.setDetails("Sachin","India",400);
		c1.printDetails();
	}
}


-- Inside parent class, we can not access child class members (data & method).

CricketerDemo.java
--------------------

class Cricketer
{
	String name;
	String country;
	int totMatches;
	
	void setDetails(String name, String country, int totMatches)
	{
		this.name = name;
		this.country = country;
		this.totMatches = totMatches;
	}
	
	void printDetails()
	{
		System.out.println(name);
		System.out.println(country);
		System.out.println(totMatches);
	}
}

class Batsman extends Cricketer		//Now Batsman is the child class of Cricketer
{
	int totRuns;
	
	void setTotRuns(int totRuns)
	{
		this.totRuns = totRuns;
	}
	
	void printTotRuns()
	{
		System.out.println(totRuns);
	}
	
	void printBatsDetails()
	{
		System.out.println(name);
		System.out.println(country);
		System.out.println(totMatches);
		System.out.println(totRuns);
	}
}

class Bowler extends Cricketer		//Now Bowler is the child class of Cricketer
{
	int totWickets;
	
	void setTotWickets(int totWickets)
	{
		this.totWickets = totWickets;
	}
	
	void printTotWickets()
	{
		System.out.println(totWickets);
	}
}

class CricketerDemo
{
	public static void main(String args[])
	{
		Cricketer c1 = new Cricketer();
		c1.setDetails("Sachin","India",400);
		c1.printDetails();
		
		Batsman bats1 = new Batsman();
                bats1.setDetails("Risabh Pant","India",100);//will call parent class (Cricketer) setDetails()
                bats1.setTotRuns(3000);	//will call child class (Batsman) setTotRuns()
		//bats1.printDetails();	//will call parent class printDetails()
		//bats1.printTotRuns();	//will call child class printTotRuns()
		
		bats1.printBatsDetails();	//will call child class' printBatsDetails()
		
		
		Bowler bowl1 = new Bowler();
		bowl1.setDetails("Bumrah","India",150);	//parent class' setDetails() called
		bowl1.setTotWickets(350);	//child class' (Bowler) setTotWickets() called
		bowl1.printDetails();		//parent class' printDetails() called
		bowl1.printTotWickets();	//child class' (Bowler) printTotWickets() called
		
	}
}

OUTPUT:
Sachin
India
400
Risabh Pant
India
100
3000
Bumrah
India
150
350

=======================================================================================
- Constructor is never inherited

- Whenever any child class object is created, along with child class constructor, parent class is also called. The order of constructor calling is always from parent class to child class.


class First
{
	int a;
	
	First()
	{
		System.out.println("Zero-arg const of First");
		a = 1;
	}
}

class Second extends First
{
	int b;
	
	Second()
	{
		System.out.println("Zero-arg const of Second");
		b = 2;
	}
}

public class ConstructorCallingDemo
{
	public static void main(String args[])
	{
		new Second();
	}
}


OUTPUT:
Zero-arg const of First
Zero-arg const of Second

=============================================================================

Method Overriding
--------------------

Method of the parent class can be redefined in the child class with the same name and signature i.e. with the same name and arguments. In the case of method overriding method name, argument type and number of arguments everything will be same in the child class.

Example:

class First
{
	void myFun(int x, int y)			//Overridden method
	{
		System.out.println("myFun of First");
	}
	
	void anotherFun(int x)
	{
		System.out.println("anotherFun of First");
	}
}

class Second extends First
{
	void myFun(int x, int y)		//Just comment this method and check out the output.
	{
		System.out.println("myFun of Second");
	}
}

public class OverridingDemo
{
	public static void main(String args[])
	{
		Second s = new Second();
		s.myFun(2,5);		//myFun of Second
		s.anotherFun(5);	//anotherFun of First
	}
}

OUTPUT:
myFun of Second
anotherFun of First

========================================================================
Difference between method overloading and method overriding

-- Overloading happens inside the same class or child class but overriding happens inside the child class only.
-- In the case of overloading and overriding, in both the cases method name will remain same but in the case of overloading signature will differ mean arguments will differ but in the case of overriding arguments will also remain same (type as well as no. of arguments).

-- In the case of method overriding, return type can be changed in the child class but that return type must be the subtype (covariant type) of the return type in the parent class.


class First
{
}

class Second extends First
{
}

class Third
{
}

class Demo
{
	First myFun()
	{
		First f = new First();
		return f;
	}
}

class Demo1 extends Demo
{
	Second myFun()		//As Second is child of First or we can say subtype of First
	{
		Second s = new Second();
		return s;
	}
	
}

if we redefine as 

Third myFun()		//It will give error as Third is not the child class of First.
{
}

=======================================================================

'super' keyword
----------------

'super' can be used to access the parent class members (data and method) from the child class. 'super' will always be used within the child class.

class First
{
	int num = 5;
	
	void myFun(int x, int y)			//Overridden method
	{
		System.out.println("myFun of First");
	}
	
	void anotherFun(int x)
	{
		System.out.println("anotherFun of First");
	}
}

class Second extends First
{
	void myFun(int x, int y)		//Just comment this method and check out the output.
	{
		super.myFun(x,y);
		System.out.println("myFun of Second");
		System.out.println(super.num);	//System.out.println(num);
	}
}

public class OverridingDemo
{
	public static void main(String args[])
	{
		Second s = new Second();
		s.myFun(2,5);		//myFun of Second
		s.anotherFun(5);	//anotherFun of First
	}
}


OUTPUT:

myFun of First
myFun of Second
5
anotherFun of First

================================================================

class Cricketer
{
	String name;
	String country;
	int totMatches;
	
	void setDetails(String name, String country, int totMatches)
	{
		this.name = name;
		this.country = country;
		this.totMatches = totMatches;
	}
	
	void printDetails()
	{
		System.out.println(name);
		System.out.println(country);
		System.out.println(totMatches);
	}
}

class Batsman extends Cricketer		//Now Batsman is the child class of Cricketer
{
	int totRuns;
	
	void setDetails(String name, String country, int totMatches, int totRuns) //Method overloading
	{
		setDetails(name,country,totMatches);
		this.totRuns = totRuns;
	}
	
	void printDetails()		//Method overriding
	{
		super.printDetails();
		System.out.println(totRuns);
	}
}

class Bowler extends Cricketer		//Now Bowler is the child class of Cricketer
{
	int totWickets;
	
	void setDetails(String name, String country, int totMatches, int totWickets)
	{
		super.setDetails(name,country,totMatches);
		this.totWickets = totWickets;
	}
	
	void printDetails()
	{
		super.printDetails();
		System.out.println(totWickets);
	}
}

class CricketerDemo
{
	public static void main(String args[])
	{
		Batsman bats1 = new Batsman();
                bats1.setDetails("Risabh Pant","India",100,3000);
                bats1.printDetails();
	}
}

OUTPUT:
Risabh Pant
India
100
3000

==================================================================================

Constructor calling using 'super'

-- Always super class' zero-arg/default constructor will be called by default whenever any child class' object is created.
-- But we can change that default constructor call by using 'super'
-- If we call superclass constructor using 'super' keyword, it should always be the very first statement inside the constructor.
-- We can not make superclass constructor call using 'super' inside any other method except child class constructor.

class First
{
	int a;
	
	First ()
	{
		System.out.println("0-arg const of First");
	}
	
	First(int a)			
	{
		System.out.println("1-arg const of First");
		this.a = a;
	}
}

class Second extends First
{
	int b;
	
	Second()
	{
		System.out.println("0-arg const of Second");
	}
	
	Second(int a, int b)
	{
		super(a);		//superclass 1-arg constructor called. Must be the first statement.
		//super();		//superclass 0-arg constructor called. Must be the first statement.
		this.b = b;
		System.out.println("2-arg const of Second");
	}
	
	void fun()
	{
		//super();	//ERROR.
	}
}

public class ConstructorCallUsingSuperDemo
{
	public static void main(String args[])
	{
		Second s = new Second(5,10);
	}
}


OUTPUT:
1-arg const of First
2-arg const of Second
========================================================================================

Access Specifiers
-------------------
As name itself tells its purpose, access specifiers are used to specify the access. It means it decideds from where a data member/member functions of a class can be accessed and from where it can not be accessed.

Four access specifiers in java:
public
private
protected
default (it is not a keyword)


class First
{
	int a;		//At present, access specifier for a is 'default'
}

class First
{
	public int a;		//Access specifier for a is 'public'
	
	private void myFun()	//Access specifier for this method is 'private'
	{
	}
}


public : Can be accessed from anywhere.
private : Can be accessed inside class only.
default : Can be accessed inside the same package from any class.
protected : Can be accessed inside the same package from any class but outside the package, it can be accessed from the child class only.




class First
{
	public int a;
	private int b;
	
	void myFun()
	{
			
	}
}

class AccessSpecifierDemo
{
	public static void main(String args[])
	{
		First f = new First();
		System.out.println(f.a);		//OK
		System.out.println(f.b);		//Complation Error
	}
}


======================================================
public : from anywhere
private : inside class only
default : inside same package only
protected : inside same package from anywhere but outside the package from the child class only 
======================================================
File: mypack1/First.java
--------------------------

public class First
{
	public int a;
	private int b;
	int c;			//access specifier here : default
	protected int d;
	
	public void display()
	{
		System.out.println(a);		//OK
		System.out.println(b);		//OK	
		System.out.println(c);		//OK
		System.out.println(d);		//OK
	}
}
File: mypack1/Third.java
--------------------------

package mypack1;

public class Third
{
	void display()
	{
		First f = new First();
		System.out.println(f.a);		//OK
		System.out.println(f.b);		//ERROR	
		System.out.println(f.c);		//OK
		System.out.println(f.d);		//OK
	}
}


File: mypack2/Second.java
--------------------------

package mypack2;

import mypack1.First;

public class Second 
{
	void display()
	{
		First f = new First();
		System.out.println(f.a);		//OK
		System.out.println(f.b);		//ERROR	
		System.out.println(f.c);		//ERROR
		System.out.println(f.d);		//ERROR
	}
}

File: mypack2/Fourth.java
--------------------------
package mypack2;

import mypack1.First;

public class Fourth extends First 
{
	void display()
	{
		System.out.println(a);		//OK
		System.out.println(b);		//ERROR	
		System.out.println(c);		//ERROR
		System.out.println(d);		//OK
	}
}


File: AccessSpecifierDemo.java
----------------------------------

class AccessSpecifierDemo
{
	public static void main(String args[])
	{
		First f = new First();
		System.out.println(f.a);		//OK
		//System.out.println(f.b);		//Complation Error:  b has private access in First
		f.display();
		
		Fourth f = new Fourth();
		f.display();
	}
}

============================================================================
Access Specifiers for class
Only public and default can be used as an access specifier with the class declaration. 
In case of inner classes, all four specifiers (public,private,default,protected) can be used.

public class Demo { }  		//OK
class Demo { } 			//OK
private class Demo { } 		//ERROR
protected class Demo { }	//ERROR

============================================================================

class First
{
	int a;
	int b;
}

class Second extends First
{
	int c;
	Demo d;
	
	Second()
	{
		a = 0;
		b = 0;
		c = 0;
		d = new Demo();
	}
	
	void fun()
	{
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
		System.out.println(d.x);
		System.out.println(d.y);
	}
}

class Demo
{
	int x;
	int y;
}

class InheritanceDemo
{
	public static void main(String args[])
	{
		Second s = new Second();
		s.fun();
		
	}
}

=====================================================================

class ContactDetails
{
	String email;
	String mobNo;
}

class Employee
{
	int empId;
	String name;
	double salry;
	ContactDetails contDetails;
}

class EmployeeHandler
{
	public static void main(String args[])
	{
		Employee emp1 = new Employee(1,"Rajesh Patil",50000.00,"rajeshp@gmail.com","9876543232");
		Employee emp2 = new Employee(2,"Mohit Sinha",45000.00,"mohits@gmail.com","9878987676");
		
		emp1.printDetails();
		emp2.printDetails();
	}
}

OUTPUT:

1	Rajesh Patil	50000.00 	rajeshp@gmail.com	9876543232
2	Mohit Sinha	45000.00	mohits@gmail.com	9878987676

============================================================================================

Types of Inheritance
----------------------
Single Inheritance
Multilevel Inheritance
Hierarchical Inheritance


Single Inheritance
-------------------

class A
{
}


class B extends A
{
}


Multilevel Inheritance
--------------------------

class A
{
}

class B extends A
{
}

class C extends B
{
}


Hierarchical Inheritance
-------------------------------

class A
{
}

class B extends A
{
}

class C extends A
{
}

class D extends A
{
}

--------------------------------

class A
{
}

class B
{
}

class C extends A, B 	//ERROR : Multiple inheritance : Not allowed in java
{
}


==================================================

First <--------- Second <---------- Third <------------ Fourth

class First
{
	int a;
}

class Second extends First
{
	int b;
}

class Third extends Second
{
	int c;
}

class Fourth extends Third
{
	int d;
}


class MultilevelInheritanceDemo
{
	public static void main(String args[])
	{
		Fourth f = new Fourth();
	}
}



Each object of class First will have data => a
Each object of class Second will have data => a,b
Each object of class Third will have data => a,b,c
Each object of class Fourth will have data => a,b,c,d

================================================================================

'final' keyword

-- 'final' is a keyword and it can be used with class, data (variable) and methods.

-- final variable/data : Once data is initialized, it can not be changed.
-- final method : A final method can not be overridden in the child class.
-- final class : A final class can not be inherited.


final int a = 5;
a = 10;			//Error

final int a;
a = 5;			//First time initialization, hence it is OK
a = 10;			//Error, as it is already initialized.


=================================================================

final class First
{
	final int num;	//final instance variable

	First()
	{
		num = 1;		//first time initialization for num, so OK
		//num = 5;		//As already initialized, so ERROR
	}

	final void myFun()
	{
		System.out.println("myFun of First");
	}
}

class Second extends First	//ERROR, as First is final, it can not be inherited
{
	/*void myFun()		//ERROR, as myFun() is final in First.
	{
		System.out.println("myFun of Second");
	}*/
}

class FinalDemo
{
	public static void main(String args[])
	{
		final int a = 5;	//final local variable
		//a = 10;		//Compilation Error
		System.out.println(a);

		First f = new First();

	}
}


=========================================================================

abstract class and methods
----------------------------

abstract method : 
-- Method without body or method without definition. Inside class, it is mandatory to use 'abstract' keyword with the abstract method.

concrete method : 
-- Method which are not abstract are known as concrete method. 'concrete' is not a keyword.

Ex.

class Demo
{
	abstract void myFun();		//abstratct method
	
}

abstract class : 
-- If a class is abstract, we can not create any object of that class.
-- To make a class abstract, we use the keyword 'abstract' with the class declaration.
-- An abstract class can have zero or more abstract methods.
-- If there is any abstract method inside a class, then that class is also considered as an abstract class and in that case 
	it becomes mandatory to declare that class abstract.

-- abstract class data and methods can be used through child class' objects only.
-- An abstract class can have zero or more concrete methods and instance variables.
-- Abstract class can have constructors.
-- If a child class inherits the abstract class, in that case it becomes mandatory for the child class to define 
	the abstract method of the parent class otherwise child class will also be considered as abstract class.

abstract class Demo
{
	//Code
}


new Demo();		//Error, Demo is abstract and hence can not be instantiated i.e. we can not create 				
				//object of the Demo class.
==================================================================================
AbstractDemo.java
--------------------

abstract class Demo
{
	int a;
	int b;

	abstract void myFun();

	void anotherFun()
	{
		System.out.println("anotherFun of First");
	}
}

class First extends Demo
{
	int c;

	void myFun()
	{
		//code
	}

}

class AbstractDemo
{
	public static void main(String args[])
	{
		//new Demo(); //Compilation Error: Demo is abstract; cannot be instantiated
	}
}

====================================================================

Shape : Circle, Rectangle, Square

abstract class Shape
{
	double area;
	
	abstract void calArea();
	
	void printArea()
	{
		System.out.println(area);
	}
}

class Circle extends Shape
{
	double radius;
	
	void calArea()
	{
		area = 3.14 * radius * radius;
	}
}

class Rectangle extends Shape
{
	double len;
	double br;
	
	Rectangle()
	{
	
	}
	
	Rectangle(double len, double br)
	{
		this.len = len;
		this.br = br;
	}
	
	void calArea()
	{
		area = len * br;
	}
}

class Square extends Shape
{
	double side;
	
	void calArea()
	{
		area = side * side;
	}
}

class ShapeAreaDemo
{
	public static void main(String args[])
	{
		Rectangle rect = new Rectangle(4.0,5.0);
		rect.calArea();
		rect.printArea();
		
	}
}

OUTPUT:
20.0

=====================================================================================

Q. Can we make a class/method final as well as abstract?
A. NO, we can not declare a class/method final as well as abstract both.

Why ?

For method:

final says "It is final and can not be overridden in the child class"
abstract says "It is abstract and it must be overridden in the child class"

so, basically both contradict each other, so we can not make a method final as well as abstract.

Same with the class

final says "class can not be inherited"
abstract says "class should be inherited, if it is to be used"

That is why, we can not declare method and class final and abstract both.

=====================================================================================

We can store child class objects reference in the parent class reference type. Parent class can be an abstract class also.

Reference variable <parent> = Object <child>	//OK

Reference variable <child> = Object <parent> 	//Will give you error

class First
{
	//code
}

class Second extends First
{
	//code
}


Second s = new Second(); //OK

First f = new Second();	//OK, reference type : parent    object : child


Any class reference type can keep the reference of 
- its own object
- or reference of its child class object


Q. What methods can be called using Parent reference, if it contains child class object's reference?
A. Using parent class reference having child class object's reference,
	we can only call the methods (without doing any typecasting) which are there in the parent class.


Compiler sees "Reference type"
JVM sees "Actual Object" - which object's reference is stored there in the reference variable.

class First
{
	private void fun1()
	{
		System.out.println("fun1 of First");
	}

	void fun2()	//overridden method
	{
		System.out.println("fun2 of First");
	}
}

class Second extends First
{
	void fun2()	//overriding method
	{
		System.out.println("fun2 of Second");
	}

	void fun3()
	{
		System.out.println("fun3 of Second");
	}
}

class ParentReferenceDemo
{
	public static void main(String args[])
	{
		First f;
		f = new Second();
		
		f.fun1();
		f.fun2();
		
		//f.fun3();	//Error
		
		((Second)f).fun3();	//OK IT'S CALLED TYPECASTING

		//Second s = new First();	
	}
}

=========================================================================================

Binding
---------
Binding refers to the association (linking) between method call and method definition.

Binding takes place either at compiler time or run time.

If binding happens at compile time then it is called static binding.
If binding happens at run time then it is called dynamic binding.

static binding - compile time/early binding
dynamic binding  - run time/late binding

All final,private and static methods are bound at compile time. - Method overloading 
In the case of method overriding dynamic binding happens.

private method can not be be overridden in the child class. 
final method also can not be overridden in the child class.

===========================================================================================

Method Hiding
-------------

Static method of the parent class can not be overridden in the child class as its binding always takes place at the compile time 
according to the reference type and not the object type. 
We can redefine it in the child class with the same signature and that redefinition is called method hiding.


class First
{
	static void myFun()
	{
		System.out.println("myFun of First");
	}
	
	void anotherFun()
	{
		System.out.println("anotherFun of First");
	}
	
	//code
}

class Second extends First
{
	static void myFun()	//Method hiding
	{
		System.out.println("myFun of Second");
	}
	
	void anotherFun()
	{
		System.out.println("anotherFun of Second");
	}
	
	//code
}

MethodHidingDemo
{
	public static void main(String args[])
	{
		First f = new Second();
		f.myFun();				//class First load then static method executed because it's binding at compile time
		f.anotherFun();			//this method is non static so this execute with reference address of second in f
	}
}

OUTPUT:
myFun of First
anotherFun of Second

======================================================================

In java, member variables have static binding


class First
{
	int num = 5;
	
	{
		num = 2;
	}
	
	First()
	{
		num = 1;
	}
}

Here every object of First will have num value initialize with 5 first then overwritten with 2 (in non-static block) and 
then finally overwritten with value 1 (in constructor). 
So, final value of num inside each object will be 1 as per the above code.

=============================================================================================

class First
{
	int num = 5;
}

class Second extends First
{
	int num = 10;	//in real life project we normally don't do that. we don't take data member with the
                     //same name as it is in the parent class.
}


class MemberVariableBindingDemo
{
	public static void main(String args[])
	{
		First f = new Second();		//				binding at compile time 
		//Use Second f = new Second() then check out the output.
		System.out.println(f.num);
	}
}

OUTPUT:
5

==========================================================================================

Polymorphism
-------------
One interface, multiple methods.
One thing in multiple form.

Method overloading is an example of polymorphism. (static polymorphism)
Method overriding is also an example of polymorphism. (dynamic polymorphism)

Method overloading  -->  static polymorphism
Method overriding  -->   dynamic polymorphism

abstract class Shape
{
	double area;
	
	abstract void calArea();

	Shape()
	{
		System.out.println("Shape constructor");
	}
	
	void printArea()
	{
		System.out.println(area);
	}
}

class Circle extends Shape
{
	double radius;
	
	Circle()
	{
	
	}
	
	Circle(double radius)
	{
		this.radius = radius;
	}
	
	void calArea()
	{
		area = 3.14 * radius * radius;
	}
}

class Rectangle extends Shape
{
	double len;
	double br;
	
	Rectangle()
	{
	
	}
	
	Rectangle(double len, double br)
	{
		this.len = len;
		this.br = br;
		System.out.println("Rectangle constructor");
	}
	
	void calArea()
	{
		area = len * br;
	}
}

class Square extends Shape
{
	double side;
	
	Square()
	{
	
	}
	
	Square(double side)
	{
		this.side = side;
	}
	
	void calArea()
	{
		area = side * side;
	}
}

class ShapeAreaDemo
{
	public static void main(String args[])
	{
		Shape s[];
		s = new Shape[3];
		
		s[0] = new Rectangle(4.0,5.0);
		s[1] = new Square(8.0);
		s[2] = new Circle(5.0);
		
		for(int i = 0; i < 3; i++)
		{
			s[i].calArea();	//Same statement is calling different methods of different class. 					//Polymorphic behaviour.
			s[i].printArea();
		}
		
	}
}

==========================================================================================

Garbage Collection
------------------

When object is of no use, then memory occupied by that object should be freed.

Q. Which objects are eligible for garbage collection?
A. The objects whose references are stored nowhere (the special case is island of isolation).

Garbage collection is done by the jvm automatically at some regular interval and we don't need to do anything. 
But if we explicitly want to initiate the garbage collection then we can do that using the following methods:

System.gc();			//class method or static method

OR;

Runtime.getRuntime().gc();	//instance method or non-static method


class System
{
	static Runtime getRuntime()
	{
		//return RuntimeObject;
	}
}

System.gc() internally uses System.getRuntime().gc() method.

If we use System.gc() or System.getRuntime().gc() to initiate garbage collection, it is still not sure that JVM will start the garbage collection. The final decision always with JVM.

Five cases:
1. Local reference variable
2. Nullifying the reference variable
3. Reassigning the reference variable
4. Anonymous object creation
5. Island of isolation (Objects refer each other internally but their references are not stored anywhere else)


Example:

class First
{
	
}

==========================================================================























































































































































